// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: cinema/cinema.proto

package cinema

import (
	_ "github.com/t3201v/seat-arrangement/gen/buf/validate"
	_ "github.com/t3201v/seat-arrangement/gen/google/api"
	_ "github.com/t3201v/seat-arrangement/gen/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message to configure the cinema layout and distancing rules
type ConfigureCinemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows        int32 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`                                  // Number of rows in the cinema
	Columns     int32 `protobuf:"varint,2,opt,name=columns,proto3" json:"columns,omitempty"`                            // Number of columns in the cinema
	MinDistance int32 `protobuf:"varint,3,opt,name=min_distance,json=minDistance,proto3" json:"min_distance,omitempty"` // Minimum Manhattan distance between groups
}

func (x *ConfigureCinemaRequest) Reset() {
	*x = ConfigureCinemaRequest{}
	mi := &file_cinema_cinema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureCinemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureCinemaRequest) ProtoMessage() {}

func (x *ConfigureCinemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureCinemaRequest.ProtoReflect.Descriptor instead.
func (*ConfigureCinemaRequest) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigureCinemaRequest) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *ConfigureCinemaRequest) GetColumns() int32 {
	if x != nil {
		return x.Columns
	}
	return 0
}

func (x *ConfigureCinemaRequest) GetMinDistance() int32 {
	if x != nil {
		return x.MinDistance
	}
	return 0
}

type UpdateCinemaConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows        int32  `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`                                  // Number of rows in the cinema
	Columns     int32  `protobuf:"varint,2,opt,name=columns,proto3" json:"columns,omitempty"`                            // Number of columns in the cinema
	MinDistance int32  `protobuf:"varint,3,opt,name=min_distance,json=minDistance,proto3" json:"min_distance,omitempty"` // Minimum Manhattan distance between groups
	Id          string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateCinemaConfigRequest) Reset() {
	*x = UpdateCinemaConfigRequest{}
	mi := &file_cinema_cinema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCinemaConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCinemaConfigRequest) ProtoMessage() {}

func (x *UpdateCinemaConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCinemaConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateCinemaConfigRequest) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCinemaConfigRequest) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *UpdateCinemaConfigRequest) GetColumns() int32 {
	if x != nil {
		return x.Columns
	}
	return 0
}

func (x *UpdateCinemaConfigRequest) GetMinDistance() int32 {
	if x != nil {
		return x.MinDistance
	}
	return 0
}

func (x *UpdateCinemaConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Message for querying available seats
type GetAvailableSeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableSeats []*Seat `protobuf:"bytes,1,rep,name=available_seats,json=availableSeats,proto3" json:"available_seats,omitempty"` // List of available seats
	Grid           string  `protobuf:"bytes,2,opt,name=grid,proto3" json:"grid,omitempty"`
}

func (x *GetAvailableSeatsResponse) Reset() {
	*x = GetAvailableSeatsResponse{}
	mi := &file_cinema_cinema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableSeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableSeatsResponse) ProtoMessage() {}

func (x *GetAvailableSeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableSeatsResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableSeatsResponse) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{2}
}

func (x *GetAvailableSeatsResponse) GetAvailableSeats() []*Seat {
	if x != nil {
		return x.AvailableSeats
	}
	return nil
}

func (x *GetAvailableSeatsResponse) GetGrid() string {
	if x != nil {
		return x.Grid
	}
	return ""
}

type GetAvailableSeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAvailableSeatsRequest) Reset() {
	*x = GetAvailableSeatsRequest{}
	mi := &file_cinema_cinema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableSeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableSeatsRequest) ProtoMessage() {}

func (x *GetAvailableSeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableSeatsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableSeatsRequest) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{3}
}

func (x *GetAvailableSeatsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Message for reserving seats
type ReserveSeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeatCoords []*Seat `protobuf:"bytes,2,rep,name=seat_coords,json=seatCoords,proto3" json:"seat_coords,omitempty"` // Coordinates of seats to reserve
	GroupName  string  `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *ReserveSeatsRequest) Reset() {
	*x = ReserveSeatsRequest{}
	mi := &file_cinema_cinema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveSeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSeatsRequest) ProtoMessage() {}

func (x *ReserveSeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSeatsRequest.ProtoReflect.Descriptor instead.
func (*ReserveSeatsRequest) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{4}
}

func (x *ReserveSeatsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReserveSeatsRequest) GetSeatCoords() []*Seat {
	if x != nil {
		return x.SeatCoords
	}
	return nil
}

func (x *ReserveSeatsRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type SuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indication if the reservation was successful
}

func (x *SuccessResponse) Reset() {
	*x = SuccessResponse{}
	mi := &file_cinema_cinema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessResponse) ProtoMessage() {}

func (x *SuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessResponse.ProtoReflect.Descriptor instead.
func (*SuccessResponse) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{5}
}

func (x *SuccessResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Message for canceling seat reservations
type CancelSeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeatCoords []*Seat `protobuf:"bytes,2,rep,name=seat_coords,json=seatCoords,proto3" json:"seat_coords,omitempty"` // Coordinates of seats to cancel
}

func (x *CancelSeatsRequest) Reset() {
	*x = CancelSeatsRequest{}
	mi := &file_cinema_cinema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSeatsRequest) ProtoMessage() {}

func (x *CancelSeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSeatsRequest.ProtoReflect.Descriptor instead.
func (*CancelSeatsRequest) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{6}
}

func (x *CancelSeatsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CancelSeatsRequest) GetSeatCoords() []*Seat {
	if x != nil {
		return x.SeatCoords
	}
	return nil
}

type ConfigureCinemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigureCinemaResponse) Reset() {
	*x = ConfigureCinemaResponse{}
	mi := &file_cinema_cinema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureCinemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureCinemaResponse) ProtoMessage() {}

func (x *ConfigureCinemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureCinemaResponse.ProtoReflect.Descriptor instead.
func (*ConfigureCinemaResponse) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigureCinemaResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Represents a seat by its row and column coordinates
type Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row    int32 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`       // Row index (0-based)
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"` // Column index (0-based)
}

func (x *Seat) Reset() {
	*x = Seat{}
	mi := &file_cinema_cinema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_cinema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_cinema_cinema_proto_rawDescGZIP(), []int{8}
}

func (x *Seat) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Seat) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

var File_cinema_cinema_proto protoreflect.FileDescriptor

var file_cinema_cinema_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x7c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x66, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x72, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x5d, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x29, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x04, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x32, 0xe8, 0x04,
	0x0a, 0x0d, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7c, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x12, 0x1e, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2f, 0x73,
	0x65, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x7f, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x1a, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7f,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x2f, 0x73, 0x65, 0x61, 0x74, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x6c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12,
	0x1b, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x2f, 0x73, 0x65, 0x61, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x69, 0x0a,
	0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x65, 0x61,
	0x74, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x80, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x42, 0x0b, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x33, 0x32, 0x30, 0x31, 0x76, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x2d, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x43, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0xca, 0x02, 0x06, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0xe2, 0x02, 0x12,
	0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x06, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cinema_cinema_proto_rawDescOnce sync.Once
	file_cinema_cinema_proto_rawDescData = file_cinema_cinema_proto_rawDesc
)

func file_cinema_cinema_proto_rawDescGZIP() []byte {
	file_cinema_cinema_proto_rawDescOnce.Do(func() {
		file_cinema_cinema_proto_rawDescData = protoimpl.X.CompressGZIP(file_cinema_cinema_proto_rawDescData)
	})
	return file_cinema_cinema_proto_rawDescData
}

var file_cinema_cinema_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cinema_cinema_proto_goTypes = []any{
	(*ConfigureCinemaRequest)(nil),    // 0: cinema.ConfigureCinemaRequest
	(*UpdateCinemaConfigRequest)(nil), // 1: cinema.UpdateCinemaConfigRequest
	(*GetAvailableSeatsResponse)(nil), // 2: cinema.GetAvailableSeatsResponse
	(*GetAvailableSeatsRequest)(nil),  // 3: cinema.GetAvailableSeatsRequest
	(*ReserveSeatsRequest)(nil),       // 4: cinema.ReserveSeatsRequest
	(*SuccessResponse)(nil),           // 5: cinema.SuccessResponse
	(*CancelSeatsRequest)(nil),        // 6: cinema.CancelSeatsRequest
	(*ConfigureCinemaResponse)(nil),   // 7: cinema.ConfigureCinemaResponse
	(*Seat)(nil),                      // 8: cinema.Seat
}
var file_cinema_cinema_proto_depIdxs = []int32{
	8, // 0: cinema.GetAvailableSeatsResponse.available_seats:type_name -> cinema.Seat
	8, // 1: cinema.ReserveSeatsRequest.seat_coords:type_name -> cinema.Seat
	8, // 2: cinema.CancelSeatsRequest.seat_coords:type_name -> cinema.Seat
	0, // 3: cinema.CinemaService.ConfigureCinema:input_type -> cinema.ConfigureCinemaRequest
	1, // 4: cinema.CinemaService.UpdateCinemaConfig:input_type -> cinema.UpdateCinemaConfigRequest
	3, // 5: cinema.CinemaService.GetAvailableSeats:input_type -> cinema.GetAvailableSeatsRequest
	4, // 6: cinema.CinemaService.ReserveSeats:input_type -> cinema.ReserveSeatsRequest
	6, // 7: cinema.CinemaService.CancelSeats:input_type -> cinema.CancelSeatsRequest
	7, // 8: cinema.CinemaService.ConfigureCinema:output_type -> cinema.ConfigureCinemaResponse
	5, // 9: cinema.CinemaService.UpdateCinemaConfig:output_type -> cinema.SuccessResponse
	2, // 10: cinema.CinemaService.GetAvailableSeats:output_type -> cinema.GetAvailableSeatsResponse
	5, // 11: cinema.CinemaService.ReserveSeats:output_type -> cinema.SuccessResponse
	5, // 12: cinema.CinemaService.CancelSeats:output_type -> cinema.SuccessResponse
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cinema_cinema_proto_init() }
func file_cinema_cinema_proto_init() {
	if File_cinema_cinema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cinema_cinema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cinema_cinema_proto_goTypes,
		DependencyIndexes: file_cinema_cinema_proto_depIdxs,
		MessageInfos:      file_cinema_cinema_proto_msgTypes,
	}.Build()
	File_cinema_cinema_proto = out.File
	file_cinema_cinema_proto_rawDesc = nil
	file_cinema_cinema_proto_goTypes = nil
	file_cinema_cinema_proto_depIdxs = nil
}
