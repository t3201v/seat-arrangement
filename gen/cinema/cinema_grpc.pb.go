// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cinema/cinema.proto

package cinema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CinemaService_ConfigureCinema_FullMethodName    = "/cinema.CinemaService/ConfigureCinema"
	CinemaService_UpdateCinemaConfig_FullMethodName = "/cinema.CinemaService/UpdateCinemaConfig"
	CinemaService_GetAvailableSeats_FullMethodName  = "/cinema.CinemaService/GetAvailableSeats"
	CinemaService_ReserveSeats_FullMethodName       = "/cinema.CinemaService/ReserveSeats"
	CinemaService_CancelSeats_FullMethodName        = "/cinema.CinemaService/CancelSeats"
)

// CinemaServiceClient is the client API for CinemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type CinemaServiceClient interface {
	// Configures cinema size and minimum distance between groups
	ConfigureCinema(ctx context.Context, in *ConfigureCinemaRequest, opts ...grpc.CallOption) (*ConfigureCinemaResponse, error)
	// Configures cinema size and minimum distance between groups
	UpdateCinemaConfig(ctx context.Context, in *UpdateCinemaConfigRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	// Queries available seats that can be purchased together
	GetAvailableSeats(ctx context.Context, in *GetAvailableSeatsRequest, opts ...grpc.CallOption) (*GetAvailableSeatsResponse, error)
	// Reserves specific seats by their (row, column) coordinates
	ReserveSeats(ctx context.Context, in *ReserveSeatsRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	// Cancels reservation of specific seats by their (row, column) coordinates
	CancelSeats(ctx context.Context, in *CancelSeatsRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type cinemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaServiceClient(cc grpc.ClientConnInterface) CinemaServiceClient {
	return &cinemaServiceClient{cc}
}

func (c *cinemaServiceClient) ConfigureCinema(ctx context.Context, in *ConfigureCinemaRequest, opts ...grpc.CallOption) (*ConfigureCinemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureCinemaResponse)
	err := c.cc.Invoke(ctx, CinemaService_ConfigureCinema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) UpdateCinemaConfig(ctx context.Context, in *UpdateCinemaConfigRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, CinemaService_UpdateCinemaConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) GetAvailableSeats(ctx context.Context, in *GetAvailableSeatsRequest, opts ...grpc.CallOption) (*GetAvailableSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableSeatsResponse)
	err := c.cc.Invoke(ctx, CinemaService_GetAvailableSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) ReserveSeats(ctx context.Context, in *ReserveSeatsRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, CinemaService_ReserveSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceClient) CancelSeats(ctx context.Context, in *CancelSeatsRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, CinemaService_CancelSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaServiceServer is the server API for CinemaService service.
// All implementations must embed UnimplementedCinemaServiceServer
// for forward compatibility.
//
// Service definition
type CinemaServiceServer interface {
	// Configures cinema size and minimum distance between groups
	ConfigureCinema(context.Context, *ConfigureCinemaRequest) (*ConfigureCinemaResponse, error)
	// Configures cinema size and minimum distance between groups
	UpdateCinemaConfig(context.Context, *UpdateCinemaConfigRequest) (*SuccessResponse, error)
	// Queries available seats that can be purchased together
	GetAvailableSeats(context.Context, *GetAvailableSeatsRequest) (*GetAvailableSeatsResponse, error)
	// Reserves specific seats by their (row, column) coordinates
	ReserveSeats(context.Context, *ReserveSeatsRequest) (*SuccessResponse, error)
	// Cancels reservation of specific seats by their (row, column) coordinates
	CancelSeats(context.Context, *CancelSeatsRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedCinemaServiceServer()
}

// UnimplementedCinemaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCinemaServiceServer struct{}

func (UnimplementedCinemaServiceServer) ConfigureCinema(context.Context, *ConfigureCinemaRequest) (*ConfigureCinemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCinema not implemented")
}
func (UnimplementedCinemaServiceServer) UpdateCinemaConfig(context.Context, *UpdateCinemaConfigRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCinemaConfig not implemented")
}
func (UnimplementedCinemaServiceServer) GetAvailableSeats(context.Context, *GetAvailableSeatsRequest) (*GetAvailableSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSeats not implemented")
}
func (UnimplementedCinemaServiceServer) ReserveSeats(context.Context, *ReserveSeatsRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveSeats not implemented")
}
func (UnimplementedCinemaServiceServer) CancelSeats(context.Context, *CancelSeatsRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSeats not implemented")
}
func (UnimplementedCinemaServiceServer) mustEmbedUnimplementedCinemaServiceServer() {}
func (UnimplementedCinemaServiceServer) testEmbeddedByValue()                       {}

// UnsafeCinemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaServiceServer will
// result in compilation errors.
type UnsafeCinemaServiceServer interface {
	mustEmbedUnimplementedCinemaServiceServer()
}

func RegisterCinemaServiceServer(s grpc.ServiceRegistrar, srv CinemaServiceServer) {
	// If the following call pancis, it indicates UnimplementedCinemaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CinemaService_ServiceDesc, srv)
}

func _CinemaService_ConfigureCinema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureCinemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).ConfigureCinema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_ConfigureCinema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).ConfigureCinema(ctx, req.(*ConfigureCinemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_UpdateCinemaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCinemaConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).UpdateCinemaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_UpdateCinemaConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).UpdateCinemaConfig(ctx, req.(*UpdateCinemaConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_GetAvailableSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).GetAvailableSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_GetAvailableSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).GetAvailableSeats(ctx, req.(*GetAvailableSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_ReserveSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).ReserveSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_ReserveSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).ReserveSeats(ctx, req.(*ReserveSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaService_CancelSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceServer).CancelSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaService_CancelSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceServer).CancelSeats(ctx, req.(*CancelSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaService_ServiceDesc is the grpc.ServiceDesc for CinemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinema.CinemaService",
	HandlerType: (*CinemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureCinema",
			Handler:    _CinemaService_ConfigureCinema_Handler,
		},
		{
			MethodName: "UpdateCinemaConfig",
			Handler:    _CinemaService_UpdateCinemaConfig_Handler,
		},
		{
			MethodName: "GetAvailableSeats",
			Handler:    _CinemaService_GetAvailableSeats_Handler,
		},
		{
			MethodName: "ReserveSeats",
			Handler:    _CinemaService_ReserveSeats_Handler,
		},
		{
			MethodName: "CancelSeats",
			Handler:    _CinemaService_CancelSeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cinema/cinema.proto",
}
